공부 중 새로 배운 부분, 몰랐던 부분들을 기록.
성공한 과제는 기록하지 않음.


["Hello world!"]
스크립트를 별도의 파일에 작성하면 브라우저가 스크립트를 다운받아 캐시(cache)에 저장하기 때문에, 성능상의 이점이 있습니다.
(단순히 가독성만 올리는 줄 알았는데, 성능상의 이점도 존재. 안할 이유가 없구만?)

src 속성이 있으면 태그 내부의 코드는 무시됩니다.
<script> 태그는 src 속성과 내부 코드를 동시에 가지지 못합니다.
(그냥 import, src쓰자)

[코드 구조]
여러 줄의 주석은 슬래시와 별표 /*로 시작해 별표와 슬래시 */로 끝납니다.
(이제 줄마다 '//' 하지말자.)

Ctrl+/ 를 사용하면 해당 줄의 코드를 한 줄짜리 주석으로 처리할 수 있으며, 여러 줄의 주석은 Ctrl+Shift+/ 를 통해 처리할 수 있습니다.
Mac에서는 Ctrl 대신 Cmd를, Shift대신 Option을 사용하세요.

주석 달기를 두려워하지 마세요.
주석을 달면 코드의 전체적인 길이가 증가합니다. 하지만 이는 전혀 문제가 되지 않습니다. 프로덕션 서버에 배포하기 전에 코드를 압축해주는 도구가 많이 있고, 
이 도구들은 주석을 삭제해주기 때문입니다. 실행 중인 스크립트엔 주석이 들어가지 않으므로, 주석은 최종으로 배포되는 코드에 부정적인 영향을 끼치지 않습니다.
(까불지 말고 세세하게 정리하자.)

[엄격 모드]
지시자 "use strict", 혹은 'use strict'는 단순한 문자열처럼 생겼습니다. 하지만 이 지시자가 스크립트 최상단에 오면 스크립트 전체가 “모던한” 방식으로 동작합니다.
(클래스,모듈이라 불리는 구조를 사용한다면 작성하지 않아도 됨)

[변수와 상수]
let user = 'John';
let age = 25;
let message = 'Hello';

let user = 'John';
    age = 25;
    message = 'Hello';

let user = 'John';,
    age = 25;,
    message = 'Hello';
세 변수 모두 같은 변수

자바스크립트에선 변수 명명 시 두 가지 제약 사항이 있습니다.

변수명에는 오직 문자와 숫자, 그리고 기호 $와 _만 들어갈 수 있습니다.
첫 글자는 숫자가 될 수 없습니다.
(그래서 $가 들어갔구나, 괜히 쫄았네)

예약어(reserved name) 목록에 있는 단어는 변수명으로 사용할 수 없습니다.
이 단어들은 자바스크립트 내부에서 이미 사용 중이기 때문입니다.
(let class = '라고 할뻔')


실제 프로젝트에선 맨 처음부터 완전히 독립적인 코드를 작성하기보다 기존 코드의 틀을 변경하고 확장하는데 대부분의 시간을 보냅니다. 
작성했던 코드를 얼마 후에 다시 봤을 때, 정보에 알맞은 이름이 적혀있으면 정보를 더 쉽게 찾을 수 있습니다. 다시 말해, 변수가 올바른 이름을 가졌을 때 말이죠.
그러므로 변수를 선언하기 전에 내가 지은 변수의 이름이 괜찮은지 숙고해 주시기 바랍니다.
자신만의 규칙이나 소속된 팀의 규칙을 따르세요. 만약 사이트 방문객을 'user’라고 부르기로 했다면, 이와 관련된 변수를 
currentVisitor나 newManInTown이 아닌currentUser나 newUser라는 이름으로 지어야 합니다.

변수를 재사용하면 변수 선언에 쏟는 노력을 좀 덜 순 있겠지만, 디버깅에 열 배 더 많은 시간을 쏟아야 합니다.
변수를 추가하는 것은 악습이 아닙니다. 좋은 습관입니다.
{과제}
변수 가지고 놀기
중요도: 2
admin과 name이라는 변수를 선언하세요.
name에 값으로 "John"을 할당해 보세요.
name의 값을 admin에 복사해 보세요.
admin의 값을 alert 창에 띄워보세요. "John"이 출력되어야 합니다.
(해답)
let admin, name; // 변수 두 개를 동시에 선언할 수 있습니다.
name = "John";
admin = name;
alert( admin ); // "John"
(내답)
const name = "John";
const admin = alert(`${name}`); //"John"

[자료형]
숫자형(Infinity, -Infinity, NaN같은 '특수 숫자 값(special numeric value)도 포함)
BigInt(암호 관련 작업같이 아주 큰 숫자가 필요한 상황에서는 필요)
문자형(String{"",'',``})
불린형(Boolean{true,false})
null(비어있음.)
undefined(할당되지 않음)
객체형(복잡한 데이터 구조를 표현할 때 사용합니다)
심볼형(객체의 고유 식별자를 만들 때 사용합니다)
typeof(피연산자의 자료형을 알려줍니다.)

[alert, prompt, confirm을 이용한 상호작용]
메시지가 있는 작은 창은 모달 창(modal window) 이라고 부릅니다. '모달’이란 단어엔 페이지의 나머지 부분과 상호 작용이 불가능하다는 의미가 내포되어 있습니다.
따라서 사용자는 모달 창 바깥에 있는 버튼을 누른다든가 하는 행동을 할 수 없습니다. 확인 버튼을 누르기 전까지 말이죠.
이런 제약사항은 간결성을 위해 치러야 할 대가입니다. 창을 더 멋지게 꾸미고 복잡한 상호작용을 가능하게 해주는 다른 방법도 있긴 하지만, '멋을 위한 부가 기능’이
필요하지 않다면 지금까지 소개해드린 기본 메서드만으로 충분합니다.
result = prompt(title, [default]);
result = confirm(question);